---
version: 0.1

log:
  level: <%= p('docker.registry.loglevel', 'info') %>
  formatter: text
  fields:
    service: registry
    environment: <%= name %>-<%= index %>

http:
  addr: <%= p('docker.registry.bind','') %>:<%= p('docker.registry.port') %>
  <% if_p('docker.registry.cookie') do |cookie| %>secret: <%= cookie %>
  <% end %>
  <% if_p('docker.registry.endpoint') do |endpoint| %>host: <%= endpoint %>
  <% end %>
  <% if p('docker.registry.debug_endpoint_monit') == true ||
        p('docker.registry.debug_endpoint_monit') =~ (/(true|t|yes|y|1)$/i) ||
        p('docker.registry.debug_endpoint_enabled') == true ||
        p('docker.registry.debug_endpoint_enabled') =~ (/(true|t|yes|y|1)$/i) %>debug:
    addr: <%= p('docker.registry.debug_endpoint') %>
  <% end %>
  headers:
    X-Content-Type-Options: [nosniff]
  <% if_p('docker.registry.ssl.cert') do %>tls:
    certificate: /var/vcap/jobs/registry/tls/cert.pem
    key: /var/vcap/jobs/registry/tls/key.pem
  <% end %>
  relativeurls: <%= p('docker.registry.relativeurls') == true ? 'yes' : 'no' %>

storage:
  <% if !p('docker.cache.disabled') %>
  cache:  
    blobdescriptor: <% if_p('docker.cache.host') do %>redis<% end.else do %>inmemory<% end %>
  <% end %>

  <% if_p('docker.registry.storage') do |storage| %>
  <% storage.each do |s, options| %><%= s %>:
    <% options.each do |key, value| %><% if s == 'gcs' && key == 'keyfile' %>keyfile: /var/vcap/jobs/registry/config/gcs.key<% else %><%= key %>: <%= value %><% end %>
    <% end %>
  <% end %>
  <% end.else do %>
  filesystem:
    rootdirectory: <%= p('docker.registry.root') %>
  <% end %>
  delete:
    enabled: <%= p('docker.registry.storage_delete', 'false') %>
  redirect:
    disable: <%= p('docker.registry.storage_disable_redirect', 'false') %>
  maintenance:
  <% if_p('docker.registry.storage_maintenance') do |maintenance| %>
    <% maintenance.each do |m, options| %><%= m %>:
      <% options.each do |key, value| %><%= key %>: <%= value %>
      <% end %>
    <% end %>
  <% end %>

<% if_p('docker.mirror.host') do %>
proxy:
  remoteurl: <%= p('docker.mirror.host') %>
  <% if_p('docker.mirror.username') do %>username: <%= p('docker.mirror.username') %><% end %>
  <% if_p('docker.mirror.password') do %>password: <%= p('docker.mirror.password') %><% end %>
<% end %>

health:
  storagedriver:
    enabled: <%= p('docker.registry.health_storagedriver_enabled', 'true') %>
    interval: 10s
    threshold: 3
  <% if p('docker.registry.health_cache_enabled') == true || p('docker.registry.health_cache_enabled') =~ (/(true|t|yes|y|1)$/i) %>
  <% if_p('docker.cache.host') do |cachehost| %>tcp:
    - addr: <%= cachehost %>:<%= p('docker.cache.port','6379') %>
      timeout: 3s
      interval: 30s
      threshold: 3
  <% end %>
  <% end %>

<% if_p('docker.cache.host') do %>
redis:
  addr: <%= p('docker.cache.host') %>:<%= p('docker.cache.port','6379') %>
  <% if_p('docker.cache.password') do %>password: <%= p('docker.cache.password') %><% end %>
  <% if_p('docker.cache.pool') do |pool| %>pool:
    <% pool.each do |key, value| %><%= key %>: <%= value %>
  <% end %>
  <% end %>
<% end.else do %>
# no redis configuration...
<% end %>

<% if_p('docker.registry.reporting') do |reporting| %>
reporting:
  <% reporting.each do |report, options| %><%= report %>:
    <% options.each do |key, value| %><%= key %>: <%= value %>
    <% end %>
  <% end %>
<% end %>

<% if_p('docker.registry.notifications') do |notifications| %>
notifications:
  <% notifications.each do |endpoint, notification| %><%= endpoint %>:
    - <% notification.each do |options| %><% options.each do |key, value| %><% if key == 'headers' %>headers:
        <% value.each do |k,v| %><%= k %>: <%= v %>
      <% end %><% else %><%= key %>: <%= value %>
      <% end %><% end %>
    <% end %>
  <% end %>
<% end %>

