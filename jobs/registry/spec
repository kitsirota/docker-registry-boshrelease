---
name: registry
description: "Docker Registry v2 API"
packages:
- golang
- distribution

templates:
  bin/ctl: bin/ctl
  bin/monit_debugger: bin/monit_debugger
  config/registry.conf: config/registry.conf
  config/gcs.key: config/gcs.key
  data/properties.sh.erb: data/properties.sh
  helpers/ctl_setup.sh: helpers/ctl_setup.sh
  helpers/ctl_utils.sh: helpers/ctl_utils.sh
  tls/cert.pem: tls/cert.pem
  tls/key.pem: tls/key.pem

properties:
  docker.registry.bind:
    description: What address to bind the Docker Registry v2 API
    default: 127.0.0.1
  docker.registry.port:
    description: What port to run the Docker Registry v2 API on
    default: 5000
  docker.registry.loglevel:
    description: Sets the sensitivity of logging output. Permitted values are error, warn, info and debug
    default: info
  docker.registry.endpoint:
    description: Externally-reachable address for the registry, as a fully qualified URL. If present, it is used when creating generated URLs. Otherwise, these URLs are derived from client requests
    example: "https://myregistryaddress.org:5000"
  docker.registry.debug_endpoint:
    description: Debug endpoint can be used for monitoring registry metrics and health, as well as profiling
    default: "127.0.0.1:5001"
  docker.registry.debug_endpoint_enabled:
    description: Debug endpoint enabled or disabled. It will create a log file with the dump of the health endpoint everytime the app it is stopped, useful with monit.
    default: true
  docker.registry.debug_endpoint_monit:
    description: Enable monit restart capability using the debug endpoint. Setting to true will enable the debug endpoint.
    default: true
  docker.registry.ofiles:
    description: Open files (ulimit)
    default: 10000

  docker.registry.cookie:
    description: A secret cookie used to sign state against tampering.
    default: ~
  docker.registry.ssl.cert:
    description: PEM-encoded SSL certificate for HTTPS registry operation
    default: ~
  docker.registry.ssl.key:
    description: PEM-encoded private key for HTTPS registry operation
    default: ~

  docker.registry.storage:
    description: Defines which storage backend is in use, otherwise filesystem backend will be used
    example:
      s3:
        accesskey: awsaccesskey
        secretkey: awssecretkey
        region: us-west-1
        regionendpoint: http://myobjects.local
        bucket: bucketname
        encrypt: true
        keyid: mykeyid
        secure: true
        v4auth: true
        chunksize: 5242880
        rootdirectory: /s3/object/name/prefix
  docker.registry.root:
    description: Path (on-disk, locally) where the Docker registry should store its data (filesystem storage backend)
    default: /var/vcap/store/registry
  docker.registry.storage_delete:
    description: Enable the deletion of image blobs and manifests by digest
    default: false
  docker.registry.storage_disable_redirect:
    description: Route all data through the Registry, or redirect the client to the backend in order to download from there
    default: false
  docker.registry.storage_maintenance:
    description: Maintenance jobs for storage, upload purging and read-only mode are the only functions available
    default:
      uploadpurging:
        enabled: true
        age: 168h
        interval: 24h
        dryrun: false
      readonly:
        enabled: false

  docker.registry.health_storagedriver_enabled:
    description: Enable periodic health check on the storage driver's backend storage
    default: true
  docker.registry.health_cache_enabled:
    description: In case of cache is defined, enables a periodic health check on the redis host and port
    default: true

  docker.mirror.host:
    description: Enables a registry to be configured as a pull through cache to the official Docker Hub. See mirror for more information
    example: https://registry-1.docker.io
  docker.mirror.username:
    description: Docker registry username
  docker.mirror.password:
    description: Docker registry password

  docker.cache.host:
    description: IP address of the redis cache host
  docker.cache.disabled:
    description: Set to true to disable blobdescriptor cache.  This can be useful in pullthrough cache deployments where a container may be cached as not existing if it hasnt finished uploading to the upstream registry.
    default: false
  docker.cache.port:
    description: Port address of the cache host
    default: 6379
  docker.cache.password:
    description: Password to access the cache host
  docker.cache.pool:
    description: Configure the behavior of the Redis connection pool.
    default:
      maxidle: 16
      maxactive: 64
      idletimeout: 300s

  docker.registry.reporting:
    description: Configures error and metrics reporting tools. At the moment only two services are supported, New Relic and Bugsnag
    example:
      newrelic:
        licensekey: newreliclicensekey
        name: newrelicname

  docker.registry.notifications:
    description: Notifications are sent in response to manifest pushes and pulls and layer pushes and pulls
    example:
        endpoints:
          - name: alistener
            url: https://mylistener.example.com/event
            headers:
              Authorization: [Bearer token]
            timeout: 500ms
            threshold: 5
            backoff: 1s

  docker.registry.http_proxy:
    description: HTTP proxy to access other resources, like the upstream docker registry.
    example: http://proxy.company.com:8888

  docker.registry.https_proxy:
    description: HTTPS proxy to access other resources, like the upstream docker registry.
    example: https://proxy.company.com:8443

  docker.registry.no_proxy:
    description: Comma separated list of ips, hosts to exclude from the HTTP proxy connections
    example: localhost,.local,.internal.mycompany.com,192.168.0.1,192.168.0.2

  docker.registry.relativeurls:
    description: Configure the registry to return relative URLs inm the Location headers, without the full hostname / IP.  This is not compatible with Docker 1.7 and prior.
    default: false
